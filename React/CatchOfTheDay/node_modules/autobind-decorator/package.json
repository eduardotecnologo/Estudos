{
  "name": "autobind-decorator",
  "version": "1.3.2",
  "description": "Decorator for binding method to an object",
  "main": "lib/index.js",
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "Andrey Popp",
    "email": "8mayday@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "babel": "^5.0.12",
    "babel-eslint": "^3.1.0",
    "babelify": "^6.0.2",
    "core-js": "^0.9.6",
    "eslint": "^0.20.0",
    "mocha": "^2.2.4",
    "mochify": "^2.7.1",
    "phantomjs": "^1.9.16"
  },
  "readme": "# autobind decorator\n\nA class or method decorator which binds methods to the instance\nso `this` is always correct, even when the method is detached.\n\nThis is particularly useful for situations like React components, where \nyou often pass methods as event handlers and would otherwise need to \n`.bind(this)`.\n```\nBefore:\n<button onClick={ this.handleClick.bind(this) }></button>\n\nAfter:\n<button onClick={ this.handleClick }></button>\n```\n\nAs decorators are a part of future ES7 standard they can only be used with\ntranspilers such as [Babel](http://babeljs.io).\n\nInstallation:\n\n    % npm install autobind-decorator\n\nExample:\n\n    import autobind from 'autobind-decorator'\n\n    class Component {\n\n      constructor(value) {\n        this.value = value\n      }\n\n      @autobind\n      method() {\n        return this.value\n      }\n    }\n\n    let component = new Component(42)\n    let method = component.method // .bind(component) isn't needed!\n    method() // returns 42\n\n\n    // Also usable on the class to bind all methods\n\n    @autobind\n    class Component { }\n",
  "readmeFilename": "README.md",
  "_id": "autobind-decorator@1.3.2",
  "dist": {
    "shasum": "6ca1af6389657559b58f3c183c35732365cca66c"
  },
  "_from": "autobind-decorator@1.3.2",
  "_resolved": "https://registry.npmjs.org/autobind-decorator/-/autobind-decorator-1.3.2.tgz"
}
